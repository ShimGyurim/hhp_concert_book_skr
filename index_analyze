자주 조회되는 쿼리 목록
대상 쿼리 : 콘서트 일정 조회
지정 사유: 현재 앱에서 가장 조회할 자료도 많고 자주 조회되는 쿼리
입력 정보 : 날짜 (character 8자리)
출력 정보 : 대상 concert_item_id 목록
대상 테이블 : 콘서트 스케줄 정보 concert_item
image

카디널리티 : 약 6백만 건 concert 스케줄 정보
image

자료 분포
image

<인덱스 없을 때 >

기본 인덱스 : PK 인 concert_item_id 와 FK 인 concert_id 의 두 개의 인덱스 존재
image

쿼리 시간 테스트 : 동일 로직을 http 요청으로 측정시간 결과 나오게 /dataTest 에 임시로 구현해 놓음

    @Test
    @DisplayName("인덱스 적용 전후 속도체크 테스트")
    public void testGetToken_NewToken() throws Exception {
        long startTime = System.currentTimeMillis();
        List<ConcertItemEntity> results = concertItemRepository.findByConcertD("20241003");
        long endTime = System.currentTimeMillis();
        log.info("Execution time: " + (endTime - startTime) + "ms");
    }
경과시간 : (입력값 20241003) 9493 ms
image

explain 결과: full scan
image

<인덱스1 : concertD 컬럼>
설정 근거: 카디널리티는 낮지만 가장 많은 row가 필터링 되는 컬럼
image

경과시간: 8559 ms
image

explain 결과 : IDX_DATE (현재 설정 인덱스) 탔음
image

결론: 소폭 줄어들긴 했으나 여전히 불만족스러운 속도
다른 날짜로 시도 : ( 20241001 )

인덱스 적용 전 : 9847 ms 소요
image

인덱스 적용 후 : 8317 ms 소요
image

결론: 20231003 날짜 입력 시와 비슷한 결과
<인덱스2: concertD, concert_item_id 복합인덱스>
image

explain 결과: index 탐
image

인덱스 반영 전 : 9928 ms 소요
image

인덱스 반영 후 : 8250 ms 소요
image

결론: concertD 단독으로 붙일 때와 차이 없음
최종결론
concertD 컬럼 단독으로 index 를 거는게 최선이라고 생각함.
