사전 자료 

- 나의 시나리오에서 수행하는 쿼리들을 수집해보고, 필요하다고 판단되는 인덱스를 추가하고 쿼리의 성능개선 정도를 작성하여 제출
    - 자주 조회하는 쿼리, 복잡한 쿼리 파악
    1. Index 추가 전후 Explain,  실행시간 등 비교

```jsx
실행계획 확인 
EXPLAIN SELECT * FROM your_table WHERE your_column = 'value';

쿼리실행시간측정

long startTime = System.currentTimeMillis();
List<YourEntity> results = yourRepository.findByYourColumn('value');
long endTime = System.currentTimeMillis();
System.out.println("Execution time: " + (endTime - startTime) + "ms");

```

→ 콘서트 조회 → 더미 자료 추가 → 인덱스 추가 후 개선정도 측정 분석  → explain (plan) ,실행시간 등 비교 

더미데이터 추가 

```jsx
spring.jpa.properties.hibernate.jdbc.batch_size=50 
spring.jpa.properties.hibernate.order_inserts=true 
spring.jpa.properties.hibernate.order_updates=true

@Service public class ConcertService { 
@Autowired private ConcertRepository concertRepository; 
@Transactional public void insertDummyData() 
{ 
List<Concert> concerts = new ArrayList<>(); 
for (int i = 0; i < 1000000; i++) { 
Concert concert = new Concert(); concert.setConcert_d(String.format("%08d", i)); 
concert.setConcert_name("Concert " + i); concerts.add(concert); 
if (concerts.size() % 50 == 0) { 
concertRepository.saveAll(concerts); concerts.clear(); } } 
if (!concerts.isEmpty()) { concertRepository.saveAll(concerts); } } }
```

- 프로파일링 도구 사용 : spring boot actuator
- 로그 분석 spring.jpa.show-sql=true
- 인덱스 추가

```jsx
 @Index(name = "idx_member_name")
    private String name;
```

- explain 파악

```jsx
EXPLAIN SELECT * FROM Member WHERE name = 'example';
```

- 실행시간측정

```jsx
    @Transactional
    public void measureQueryPerformance() {
        long startTime = System.currentTimeMillis();
        memberRepository.findByName("example");
        long endTime = System.currentTimeMillis();
        System.out.println("Execution time: " + (endTime - startTime) + "ms");
    }
```

---

## 자주 조회되는 쿼리 목록

1. 대상 쿼리 : 콘서트 일정 조회 
2. 지정 사유: 현재 앱에서 가장 조회할 자료도 많고 자주 조회되는 쿼리 
3. 입력 정보 : 날짜 (character 8자리) 
4. 출력 정보 : 대상 concert_item_id 목록 
5. 대상 테이블 : 콘서트 스케줄 정보 concert_item

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/7cf89366-d55c-404f-be6f-b5003f9b3546/image.png)

1. 카디널리티 : 약 6백만 건 concert 스케줄 정보 

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/218c7c92-7897-4edf-b85a-a7422de8ee06/image.png)

1. 자료 분포

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/92804b38-0f17-486e-a614-241afdaab9ed/image.png)

<인덱스 없을 때 >

---

1. 기본 인덱스 : PK 인 concert_item_id 와 FK 인 concert_id 의 두 개의 인덱스 존재  

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/bce27968-34be-4777-9a11-f1a52561c968/image.png)

쿼리 시간 테스트 : 동일 로직을 http 요청으로 측정시간 결과 나오게 /dataTest 에 임시로 구현해 놓음 

```jsx
    @Test
    @DisplayName("인덱스 적용 전후 속도체크 테스트")
    public void testGetToken_NewToken() throws Exception {
        long startTime = System.currentTimeMillis();
        List<ConcertItemEntity> results = concertItemRepository.findByConcertD("20241003");
        long endTime = System.currentTimeMillis();
        log.info("Execution time: " + (endTime - startTime) + "ms");
    }
```

1. 경과시간 : (입력값 20241003) 9493 ms  

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/828ac172-cdad-4bc1-9146-b01aac904d23/image.png)

1. explain 결과: full scan 

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/1376910a-191f-4b7e-ab7e-d1efb67cec63/image.png)

### <인덱스1 : concertD 컬럼>

---

1. 설정 근거: 카디널리티는 낮지만 가장 많은 row가 필터링 되는 컬럼 

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/920402ed-32f7-4cdd-ab40-fa62488a332f/image.png)

1. 경과시간: 8559 ms 

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/ac8bd891-20cc-4689-88fd-c98748eaead9/image.png)

1. explain 결과 : IDX_DATE (현재 설정 인덱스) 탔음

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/27355d73-5d54-48ad-92ba-fdd74f53f05f/image.png)

1. 결론: 소폭 줄어들긴 했으나 여전히 불만족스러운 속도 

다른 날짜로 시도 : ( 20241001 )

---

1. 인덱스 적용 전 : 9847 ms 소요 

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/ad211e51-2d9a-4f43-9f71-c69c236efdd8/image.png)

1. 인덱스 적용 후 :  8317 ms 소요 

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/ef7611b6-4012-4757-a441-4d7be029fb6e/image.png)

1. 결론: 20231003 날짜 입력 시와 비슷한 결과 

### <인덱스2: concertD, concert_item_id 복합인덱스>

---

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/c1daf21a-5da2-4b0e-aac1-b178db39028c/image.png)

1. explain 결과: index 탐 

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/d581265d-6ee7-4a0c-b3b8-ff7cd886b69a/image.png)

1. 인덱스 반영 전 : 9928 ms 소요

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/8d463002-f235-482b-bfe7-a80a6efca917/image.png)

1. 인덱스 반영 후 : 8250 ms 소요

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/374fa334-40a5-4ed7-b09c-7aa6369eb677/04ebc27d-51c5-472d-a7e5-9662ccb8e99b/image.png)

1. 결론: concertD 단독으로 붙일 때와 차이 없음 

### 최종결론

---

concertD 컬럼 단독으로 index 를 거는게 최선이라고 생각함.
